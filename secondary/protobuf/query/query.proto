package protobuf;

// Error message can be sent back as response or
// encapsulated in response packets.
message Error {
    required string error = 1; // Empty string means success
}

// consistency timestamp specifying a subset of vbucket.
message TsConsistency {
    repeated uint32 vbnos   = 1; // subset of vbucket numbers
    repeated uint64 seqnos  = 2; // corresponding seqno. for each vbucket
    repeated uint64 vbuuids = 3; // corresponding vbuuid for each vbucket
}

// Request can be one of the optional field.
message QueryPayload {
    required uint32                   version           = 1;
    optional StatisticsRequest        statisticsRequest = 2;
    optional StatisticsResponse       statistics        = 3;
    optional ScanRequest              scanRequest       = 4;
    optional ScanAllRequest           scanAllRequest    = 5;
    optional ResponseStreamHeader     stream            = 6;
    optional CountRequest             countRequest      = 7;
    optional CountResponse            countResponse     = 8;
    optional EndStreamRequest         endStream         = 9;
    optional StreamEndResponse        streamEnd         = 10;
}

// Get Index statistics. StatisticsResponse is returned back from indexer.
message StatisticsRequest {
    required uint64 defnID = 1;
    required Span   span   = 2;
}

message StatisticsResponse {
    required IndexStatistics stats = 1;
    optional Error           err   = 2;
}

// Scan request to indexer.
message ScanRequest {
    required uint64        defnID   = 1;
    required Span          span     = 2;
    required bool          distinct = 3;
    required int64         limit    = 4;
    required uint32        cons     = 5;
    optional TsConsistency vector   = 6;
}

// Full table scan request from indexer.
message ScanAllRequest {
    required uint64        defnID   = 1;
    required int64         limit    = 2;
    required uint32        cons     = 3;
    optional TsConsistency vector   = 4;
}

// Request by client to stop streaming the query results.
message EndStreamRequest {
}

message ResponseStreamHeader {
    optional uint64     len     = 1;
    optional Error      err     = 2;
}

// Last response packet sent by server to end query results.
message StreamEndResponse {
    optional Error err = 1;
}

// Count request to indexer.
message CountRequest {
    required uint64        defnID   = 1;
    required Span          span     = 2;
    required uint32        cons     = 3;
    optional TsConsistency vector   = 4;
}

// total number of entries in index.
message CountResponse {
    required int64 count = 1;
    optional Error err   = 2;
}

// Query messages / arguments for indexer

message Span {
    optional Range range  = 1;
    repeated bytes equals = 2;
}

message Range {
    required bytes  low       = 1;
    required bytes  high      = 2;
    required uint32 inclusion = 3;
}

// Statistics of a given index.
message IndexStatistics {
    required uint64 keysCount       = 1;
    required uint64 uniqueKeysCount = 2;
    required bytes  keyMin          = 3;
    required bytes  keyMax          = 4;
}
